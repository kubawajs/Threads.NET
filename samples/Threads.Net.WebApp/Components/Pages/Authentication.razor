@page "/authentication"
@using Threads.NET.Sdk.Client
@using Threads.Net.WebApp.Services
@rendermode InteractiveServer

@inject IThreadsClient threadsClient
@inject NavigationManager navigationMgr
@inject AuthService authService

<PageTitle>Authentication</PageTitle>

<h1>Authentication</h1>

<p role="status">Authenticate in Threads application.</p>

<button class="btn btn-primary" disabled="@IsAuthorized" @onclick="AuthorizeUser">Authenticate</button>

@if (IsAuthorized)
{
    <p>User authorized.</p>
    <p>Code: @Code</p>

    <h2>Exchange code for access token</h2>
    <button class="btn btn-success" @onclick="ExchangeCode">Exchange code</button>

    <p>Access token: @Token</p>
    <p>User ID: @UserId</p>
}

@code {
    public string? Code { get; set; }
    public bool IsAuthorized { get; set; }
    public string Token { get; set; } = "Empty.";
    public string UserId { get; set; } = "Empty.";

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(authService.Code))
        {
            Code = authService.Code;
            IsAuthorized = true;
        }
        else
        {
            IsAuthorized = false;
        }
    }

    private void AuthorizeUser()
    {
        var authorizationUrl = threadsClient.GetAuthorizationUrl(["threads_basic", "threads_content_publish"]);
        navigationMgr.NavigateTo(authorizationUrl);
    }

    private async Task ExchangeCode()
    {
        if (string.IsNullOrEmpty(Code))
        {
            return;
        }

        var response = await threadsClient.ExchangeCodeForTokenAsync(Code);

        authService.Code = null; // Clear code after use
        authService.Token = response.AccessToken;
        authService.UserId = response.UserId;

        Token = response.AccessToken;
        UserId = response.UserId.ToString();
    }
}
