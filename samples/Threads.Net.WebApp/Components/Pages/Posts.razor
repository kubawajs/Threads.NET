@page "/posts"
@using Threads.NET.Sdk.Client
@using Threads.NET.Sdk.Posts.Commands
@using Threads.NET.Sdk.Posts.Commands.CreateSingleThreadPost
@using Threads.Net.WebApp.Services

@inject IThreadsClient threadsClient
@inject AuthService authService

<PageTitle>Posts</PageTitle>

<h1>Posts</h1>

<p>Use this component to create posts in Threads.</p>

<h2>Create single thread post</h2>

<form method="post" @onsubmit="CreateSinglePost" @formname="create-single-post">
    <AntiforgeryToken />
    <div>
        <label>
            Post content:
            <InputText @bind-Value="Post!.Text" />
        </label>
    </div>
    <div>
        <button type="submit" class="btn btn-success">Create post</button>
        @if (!string.IsNullOrEmpty(ContainerId))
        {
            <p>Post ID: @ContainerId</p>
        }
    </div>
</form>


@code {
    [SupplyParameterFromForm]
    private SinglePostModel? Post { get; set; }

    private string? ContainerId { get; set; }

    protected override void OnInitialized() => Post ??= new();

    private async Task CreateSinglePost()
    {
        var accessToken = authService.Token;
        var userId = authService.UserId.ToString();
        var request = new CreateSingleThreadPostRequest(false, string.Empty, SingleThreadPostMediaType.TEXT, string.Empty, Post?.Text, accessToken, userId);
        var response = await threadsClient.CreateSingleThreadPostAsync(request);
        ContainerId = response.PostId;
    }

    public class SinglePostModel
    {
        public string? Text { get; set; }
    }
}
